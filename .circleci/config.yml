version: 2.1

commands:
  info:
    description: "Prints info about the environment."
    steps:
      - run:
          name: Info
          command: |
            echo "Node: $(node --version)"
            echo "npm: $(npm --version)"
            echo "\$CIRCLE_SHA1: $CIRCLE_SHA1"
            echo "\$CIRCLE_BRANCH: $CIRCLE_BRANCH"
  npm_install:
    description: "Runs npm install ci to get dependencies."
    steps:
      # For some reason this is always a cache miss, and we use `npm install ci` anyway.
      # - restore_cache:
      #     # Increment this version number to manually bust the cache
      #     key: v1-npm-deps-{{ checksum "package-lock.json" }}
      - run:
          name: npm install
          command: |
            npm set progress=false
            sudo npm install -g npm@6.2.0
            npm -v
            npm config set always-auth true
            # ARTIFACTORY_AUTH_TOKEN is generated like so:
            # echo -ne <circleci-bot-account-username>:<artifactory-encrypted-password> | base64
            npm config set _auth $ARTIFACTORY_NPM_TOKEN
            npm ci --fetch-retries=1
  install_aws_cli:
    description: "Installs aws cli to upload files to an S3 bucket."
    steps:
      - run:
          name: Install awscli
          command: |
            sudo apt-get update && sudo apt-get install -y awscli
  jest_test:
    description: "Runs the Jest tests and stores the results."
    steps:
      - run:
          name: Run tests
          command: npm run test:ci
          environment:
            JEST_JUNIT_OUTPUT: "test-results/run_tests/js-test-results.xml"
      - store_test_results:
          path: test-results
  cypress_test:
    description: "Runs the Cypress tests."
    steps:
      - run:
          name: Run background server
          command: npm run start
          background: true
      - run:
          shell: /bin/sh
          command: |
            wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 10 http://localhost:3000
            :
      - run:
          name: Run Cypress tests
          command: npm run cypress-test:ci
          when: on_success
  lint:
    description: "Runs the linter and store the results."
    steps:
      - run:
          name: Run linter
          command: npm run lint:ci
      - store_test_results:
          path: test-results
  deploy:
    description: "Deploys the code."
    parameters:
      to:
        description: "Deploy to staging or production."
        type: string
        default: staging
    steps:
      - run:
          name: Deploy
          command: |
            npm run deploy:<< parameters.to >>
  # # This is unused currently
  # merge_with_latest:
  #   description: "Merges this branch with the latest from master."
  #   steps:
  #     - run:
  #         name: Rebase with the latest
  #         command: |
  #           # To make sure tests pass with the latest code merged in
  #           # we'll rebase onto master and fail if we have a conflict
  #           if [[ $CIRCLE_BRANCH != master ]]; then
  #             git fetch origin master
  #             # required to prevent "fatal: empty ident name" error
  #             git config --global user.email "circleci@pagerduty.com"
  #             git config --global user.name "circleci"
  #             git merge --no-edit origin/master
  #             if [[ $? -ne 0 ]]; then
  #               echo "We can't merge the latest code with your code because of a merge conflict! Please pull the master branch locally and merge it into your branch. Then git push that to trigger another CI run."
  #               exit 1
  #             fi
  #           fi

jobs:
  run_jest_tests:
    docker:
      - image: circleci/node:8.11.1
    steps:
      - info
      - checkout
      - npm_install
      - jest_test

  run_cypress_tests:
    docker:
      - image: circleci/node:latest-browsers
    steps:
      - info
      - checkout
      - npm_install
      - cypress_test

  run_linter:
    docker:
      - image: circleci/node:8.11.1
    steps:
      - info
      - checkout
      - npm_install
      - lint

  run_deploy:
    docker:
      - image: circleci/node:8.11.1
    parameters:
      to:
        description: "Deploy to staging or production."
        type: string
        default: "staging"
    steps:
      - info
      - checkout
      - npm_install
      - install_aws_cli
      - deploy:
          to: << parameters.to >>

# https://circleci.com/docs/2.0/workflows/
workflows:
  version: 2
  testing:
    jobs:
      - run_jest_tests:
          context: PagerDuty
      - run_cypress_tests:
          context: PagerDuty
      - run_linter:
          context: PagerDuty
      - run_deploy:
          to: staging
          name: deploy_to_staging
          context: PagerDuty
      - run_deploy:
          to: production
          name: deploy_to_production
          context: PagerDuty
          requires:
            - run_jest_tests
            - run_cypress_tests
          filters:
            branches:
              only: master
